total memory: 64kb = 65536b = 256 pages

resolution = 128x128 pixels
tile size  = 8x8     pixels
screen     = 16x16   tiles

background tiles = 256b = 1 page

sprites can only have 4 different colors, one of the colors is the transparency color, so in reality are 3 colors that you can use per sprite
one pixel of a sprite can be represented by two bits, pixel colors are just indexes in a palette.
1 byte  = 4 pixels
2 bytes = 0000000000000000
4 bytes = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
tile/sprite = 8*8 pixels = 2*8 bytes = 16 bytes

max tiles/sprites = 128
mem tile/sprites  = 16 * 128 = 2048 = 8 pages

total colors = 16 (on hardware, can't be modiefied on memory)
palette = 4 colors (the first color will be used as the transparent color)
the palette needs 4 numbers that goes from 0 to 15, one nibble(4 bits) it's perfect for that

max palettes = 16
mem palettes = 16 / 2 = 8 bytes

the console will have a default font of 69 characters with 8x8 pixels
mem characters = 16 * 69 = 1104 bytes, round to the next page 1280

ZSRRRRRRRRRRRRRRRRBCCCCCVTTTTTTTT-----------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------

0xff

controller:
      ^
<- -> | | a b start select
        v
1 byte -> 0b00000000

cpu mem + cartridge = 0xffff(64kb)

cpu 0x0000 - 0x0bff
cpu 0xa000 - 0xffff

4 cores
0 -> cor transparent
1 2 3 -> cores da paleta

1 byte  = 4px
2 bytes = 8px

2 * 8 = 16

1 tile = 16 bytes

128 tiles
256 tiles bg
256 tiles fg

256 * 16 = 4096 = 0x1000
128 * 16 = 2048 = 2kb


00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00

8 background
8 sprites

16 cores:
	0x1 0x2 0x3 0x4 0x5 0x6 0x7 0x8 0x9 0xa 0xb 0xc 0xd 0xe 0xf

1 byte  = 2 indices das cores
2 bytes = 4 cores = 1 paleta

1.5 bytes = 3 cores
2   * 4 = 8  * 2 = 16 bytes
1.5 * 8 = 12 * 2 = 24 bytes
2   * 8 = 16 * 2 = 32 bytes



0000 0000 0000

0 - 63
0 - 7

64 + 8 = 72

0b00000000

0b100000
0b000

0b000000

100

0b00000000
00

16 * 16         = 256
2 * 16 * 16 / 8 = 64

10 * 16 * 16 = 2560 = 320

0 3
1 screen tile = 9 bits 
16 * 16 = 256 * 9 =

256 * 8
3 + 6 = 9

sprite:
	1 byte - x
	1 byte - y
	1 byte - tile
	2 bits - paleta
	1 bit  - flip x
	1 bit  - flip y
	1 bit  - below
	1 bit  - rot90

cpu:
	ram
	alu
	registers

rpu:
	ram (no access)
	registers
	colors
	screen

cartridge:
	rom

cpu ram + rpu ram + cartridge rom = 64kb


tiles attributes:
	bit (0, 1, 2) palette index
	bit 3         transparent
	bit 4         flipx
	bit 5         flipy
	bit 6         rot90
	bit 7         sprite ? below : unused
sprite tile: (4 bytes)
	position (x, y)  = 2 bytes
	tile index       = 1 byte
	attributes       = 1 byte
background tile: (1 byte)
	tile index = 1 byte
background attr: (1 byte)
	tile attributes = 1 byte

background:
	128 / 8 = 16
	16*16   = 256 bytes

sprites capacity: 64
64 * 4 = 256 bytes

0xf
1 byte  = 2 colors
2 bytes = 4 colors = 1 palette
2 * 4   = 8 bytes  = 4 palettes

memory layout:
		------------------|-------------------------|----------------
		address           |  usage                  | amount
		------------------|-------------------------|----------------
	cpu:                |                         |
		[0x0000 - 0x07ff] |  ram                    | 2kb
		[0x0800 - 0x08ff] |  stack                  | 256b
	rpu:                |                         |
		[0x0900 - 0x18ff] |  tiles background       | 1kb
		[0x1900 - 0x28ff] |  tiles sprites          | 1kb
		[0x2900 - 0x29ff] |  sprites                | 256b
		[0x2a00 - 0x2aff] |  background top-left    | 256b
		[0x2b00 - 0x2bff] |  background top-right   | 256b
		[0x2c00 - 0x2cff] |  background bot-left    | 256b
		[0x2e00 - 0x2eff] |  background bot-right   | 256b
		[0x2f00 - 0x2f07] |  pallete background     | 8b
		[0x2f08 - 0x2f0f] |  pallete sprites        | 8b
		[0x2f10 - 0x2f10] |  background control     | 1b
		[0x2f11 - 0x2f11] |  background x scrolling | 1b
		[0x2f12 - 0x2f12] |  background y scrolling | 1b
		[0x2f13 - 0x2f13] |  sprites amount         | 1b
	rom:                |                         |
		[0x2f14 - 0xfff7] |  general purpose        | ~52kb
		[0xfff8 - 0xfff9] |  vblank inter. addr     | 2b
		[0xfffa - 0xfffb] |  I/O inter. addr        | 2b
		[0xfffc - 0xfffd] |  reset inter. addr      | 2b
		[0xfffe - 0xffff] |  code start addr        | 2b

background control:
	bit 0, 1, 2 = bg-color
	bit 3       = bg-mirroring (0 horizontal, 1 vertical)

memory layout:
	[0x0000 - 0x00ff] zero page, used for cpu ram.
	[0x0100 - 0x01ff] stack or cpu ram
	[0x0200 - 0x11ff] more cpu ram
	[0x1200 - 0x12ff] background
	[0x1300 - 0x1307] palettes
	[0x1308 - 0x17ff] characters (read only)
	this memory is the rom loaded from the cartridge
	[0x1800 - 0x18ff] reset vector
	[0x1900 - 0x20ff] tiles/sprites
	[0x2100 - 0xfffd] general purpose memory
	[0xfffe - 0xffff] get the start address of the program

registers: x  y  z  f  s  p
           1  1  1  1  1  2

x -> general purpose 
y -> general purpose 
z -> general purpose/math operations
f -> flags
s -> stack pointer
p -> program pointer

16 -> 60

low nibble = 16 instructions
verify if high nibble is odd or even = low nibble * 2 = 16 * 2 = 32

60 - 26 = 34


opcodes:
	--------|------------------------------------------------|------------------------------------------------
	name    |  description                                   | addressing modes:                              
	        |                                                | noa | cst | zpg | zpx | zpy | adr | adx | ady | 
	--------|------------------------------------------------|-----|-----|-----|-----|-----|-----|-----|-----|
	nop     | no operation                                   | noa |     |     |     |     |     |     |     |
	inx     | incremeant x by 1                              | noa |     |     |     |     |     |     |     |
	dex     | decremeant x by 1                              | noa |     |     |     |     |     |     |     |
	iny     | incremeant y by 1                              | noa |     |     |     |     |     |     |     |
	dey     | decremeant y by 1                              | noa |     |     |     |     |     |     |     |
	zrx     | zero out x                                     | noa |     |     |     |     |     |     |     |
	zry     | zero out y                                     | noa |     |     |     |     |     |     |     |
	psh     | pushes z into the stack                        | noa |     |     |     |     |     |     |     |
	pop     | pops   the stack into z                        | noa |     |     |     |     |     |     |     |
	psf     | pushes f into the stack                        | noa |     |     |     |     |     |     |     |
	pof     | pops   the stack into f                        | noa |     |     |     |     |     |     |     |
	ret     | return from subroutine                         | noa |     |     |     |     |     |     |     |
	rti     | return from interrupt                          | noa |     |     |     |     |     |     |     |
	tzy     | transfer z to y                                | noa |     |     |     |     |     |     |     |
	tzx     | transfer z to x                                | noa |     |     |     |     |     |     |     |
	tyz     | transfer y to z                                | noa |     |     |     |     |     |     |     |
	tyx     | transfer y to x                                | noa |     |     |     |     |     |     |     |
	txz     | transfer x to z                                | noa |     |     |     |     |     |     |     |
	txy     | transfer x to y                                | noa |     |     |     |     |     |     |     |
	szy     | swap z to y                                    | noa |     |     |     |     |     |     |     |
	szx     | swap z to x                                    | noa |     |     |     |     |     |     |     |
	sxy     | swap x to y                                    | noa |     |     |     |     |     |     |     |
	sec     | set carry     flag                             | noa |     |     |     |     |     |     |     |
	sev     | set overflow  flag                             | noa |     |     |     |     |     |     |     |
	clc     | clear carry     flag                           | noa |     |     |     |     |     |     |     |
	clv     | clear overflow  flag                           | noa |     |     |     |     |     |     |     |
	shr     | shifts  to the right (z or memory)             | noa |     | zpg | zpx | zpy | adr | adx | ady |
	shl     | shifts  to the left  (z or memory)             | noa |     | zpg | zpx | zpy | adr | adx | ady |
	ror     | rotates to the right (z or memory)             | noa |     | zpg | zpx | zpy | adr | adx | ady |
	rol     | rotates to the left  (z or memory)             | noa |     | zpg | zpx | zpy | adr | adx | ady |
	and     | and with z and stores the result in z          |     | cst | zpg | zpx | zpy | adr | adx | ady |
	lor     | or  with z and stores the result in z          |     | cst | zpg | zpx | zpy | adr | adx | ady |
	xor     | xor with z and stores the result in z          |     | cst | zpg | zpx | zpy | adr | adx | ady |
	inc     | incremeants memory by 1                        |     |     | zpg | zpx | zpy | adr | adx | ady |
	dec     | decremeants memory by 1                        |     |     | zpg | zpx | zpy | adr | adx | ady |
	adc     | add to   z with carry                          |     | cst | zpg | zpx | zpy | adr | adx | ady |
	sbc     | sub from z with carry                          |     | cst | zpg | zpx | zpy | adr | adx | ady |
	ldz     | load byte into z                               |     | cst | zpg | zpx | zpy | adr | adx | ady |
	stz     | stores z into memory                           |     |     | zpg | zpx | zpy | adr | adx | ady |
	ldx     | load byte into x                               |     | cst | zpg | zpx | zpy | adr | adx | ady |
	stx     | stores x into memory                           |     |     | zpg | zpx | zpy | adr | adx | ady |
	ldy     | load byte into y                               |     | cst | zpg | zpx | zpy | adr | adx | ady |
	sty     | stores y into memory                           |     |     | zpg | zpx | zpy | adr | adx | ady |
	jts     | jump to subroutine                             |     |     |     |     |     | adr |     |     |
	jmp     | jump to memory location                        |     |     |     |     |     | adr |     |     |
	jeq     | jump if the previous operation is equal        |     |     |     |     |     | adr |     |     |
	jle     | jump if the previous operation is less         |     |     |     |     |     | adr |     |     |
	jgr     | jump if the previous operation is greater      |     |     |     |     |     | adr |     |     |
	jne     | jump if the previous operation is not equal    |     |     |     |     |     | adr |     |     |
	jnl     | jump if the previous operation is not less     |     |     |     |     |     | adr |     |     |
	jng     | jump if the previous operation is not greater  |     |     |     |     |     | adr |     |     |
	jpv     | jump if the overflow flag is set               |     |     |     |     |     | adr |     |     |
	jnv     | jump if the overflow flag is not set           |     |     |     |     |     | adr |     |     |
	jpn     | jump if the negative flag is set               |     |     |     |     |     | adr |     |     |
	jnn     | jump if the negative flag is not set           |     |     |     |     |     | adr |     |     |
	jpc     | jump if the carry    flag is set               |     |     |     |     |     | adr |     |     |
	jnc     | jump if the carry    flag is not set           |     |     |     |     |     | adr |     |     |
	cmp     | compare with z                                 |     | cst | zpg | zpx | zpy | adr | adx | ady |
	cpx     | compare with x                                 |     | cst | zpg | zpx | zpy | adr | adx | ady |
	cpy     | compare with y                                 |     | cst | zpg | zpx | zpy | adr | adx | ady |

addressing modes:
	-----------------------|------------------------------------------------------------------------------------------------------
	name                   |  description                                                                                         
	-----------------------|------------------------------------------------------------------------------------------------------
	noa (no args)          | no arguments
	cst (constant)         | constant number
	zpg (zeropage)         | get the byte of the address on the zeropage
	zpx (zeropage x)       | add x register to zeropage address than get the byte at the resulting address.
	zpy (zeropage y)       | add y register to zeropage address than get the byte at the resulting address.
	adr (address)          | get the byte of the address
	adx (address x)        | add x register to address than get the byte at the resulting address.
	ady (address y)        | add y register to address than get the byte at the resulting address.

instructions:
	-------|--------|----------------
	index  | opcode | addresing mode 
	-------|--------|----------------
	 0x00  |  nop   |  noa           
	 0x01  |  inx   |  noa             
	 0x02  |  dex   |  noa             
	 0x03  |  iny   |  noa             
	 0x04  |  dey   |  noa             
	 0x05  |  zrx   |  noa             
	 0x06  |  zry   |  noa             
	 0x07  |  psh   |  noa             
	 0x08  |  pop   |  noa             
	 0x09  |  psf   |  noa             
	 0x0a  |  pof   |  noa             
	 0x0b  |  ret   |  noa             
	 0x0c  |  rti   |  noa             
	 0x0d  |  tzy   |  noa             
	 0x0e  |  tzx   |  noa             
	 0x0f  |  tyz   |  noa             
	 0x10  |  tyx   |  noa             
	 0x11  |  txz   |  noa             
	 0x12  |  txy   |  noa             
	 0x13  |  szy   |  noa             
	 0x14  |  szx   |  noa             
	 0x15  |  sxy   |  noa             
	 0x16  |  sec   |  noa             
	 0x17  |  sev   |  noa             
	 0x18  |  clc   |  noa             
	 0x19  |  clv   |  noa             
	 0x1a  |  shr   |  noa             
	 0x1b  |  shl   |  noa             
	 0x1c  |  ror   |  noa             
	 0x1d  |  rol   |  noa             
	 0x20  |  and   |  cst             
	 0x21  |  lor   |  cst             
	 0x22  |  xor   |  cst             
	 0x23  |  adc   |  cst             
	 0x24  |  sbc   |  cst             
	 0x25  |  ldz   |  cst             
	 0x26  |  ldx   |  cst             
	 0x27  |  ldy   |  cst             
	 0x28  |  cmp   |  cst             
	 0x29  |  cpx   |  cst             
	 0x2a  |  cpy   |  cst             
	 0x30  |  shr   |  adx             
	 0x31  |  shl   |  adx             
	 0x32  |  ror   |  adx             
	 0x33  |  rol   |  adx             
	 0x34  |  and   |  adx             
	 0x35  |  lor   |  adx             
	 0x36  |  xor   |  adx             
	 0x37  |  inc   |  adx             
	 0x38  |  dec   |  adx             
	 0x39  |  adc   |  adx             
	 0x3a  |  sbc   |  adx             
	 0x3b  |  ldz   |  adx             
	 0x3c  |  stz   |  adx             
	 0x3d  |  ldx   |  adx             
	 0x3e  |  stx   |  adx             
	 0x3f  |  ldy   |  adx             
	 0x40  |  sty   |  adx             
	 0x41  |  cmp   |  adx          
	 0x42  |  cpx   |  adx          
	 0x43  |  cpy   |  adx          
	 0x50  |  shr   |  ady             
	 0x51  |  shl   |  ady             
	 0x52  |  ror   |  ady             
	 0x53  |  rol   |  ady             
	 0x54  |  and   |  ady             
	 0x55  |  lor   |  ady             
	 0x56  |  xor   |  ady             
	 0x57  |  inc   |  ady             
	 0x58  |  dec   |  ady             
	 0x59  |  adc   |  ady             
	 0x5a  |  sbc   |  ady             
	 0x5b  |  ldz   |  ady             
	 0x5c  |  stz   |  ady             
	 0x5d  |  ldx   |  ady             
	 0x5e  |  stx   |  ady             
	 0x5f  |  ldy   |  ady             
	 0x60  |  sty   |  ady             
	 0x61  |  cmp   |  ady             
	 0x62  |  cpx   |  ady             
	 0x63  |  cpy   |  ady             
	 0x70  |  shr   |  zpx             
	 0x71  |  shl   |  zpx             
	 0x72  |  ror   |  zpx             
	 0x73  |  rol   |  zpx             
	 0x74  |  and   |  zpx             
	 0x75  |  lor   |  zpx             
	 0x76  |  xor   |  zpx             
	 0x77  |  inc   |  zpx             
	 0x78  |  dec   |  zpx             
	 0x79  |  adc   |  zpx             
	 0x7a  |  sbc   |  zpx             
	 0x7b  |  ldz   |  zpx             
	 0x7c  |  stz   |  zpx             
	 0x7d  |  ldx   |  zpx             
	 0x7e  |  stx   |  zpx             
	 0x7f  |  ldy   |  zpx             
	 0x80  |  sty   |  zpx             
	 0x81  |  cmp   |  zpx             
	 0x82  |  cpx   |  zpx             
	 0x83  |  cpy   |  zpx             
	 0x90  |  shr   |  zpy             
	 0x91  |  shl   |  zpy             
	 0x92  |  ror   |  zpy             
	 0x93  |  rol   |  zpy             
	 0x94  |  and   |  zpy             
	 0x95  |  lor   |  zpy             
	 0x96  |  xor   |  zpy             
	 0x97  |  inc   |  zpy             
	 0x98  |  dec   |  zpy             
	 0x99  |  adc   |  zpy             
	 0x9a  |  sbc   |  zpy             
	 0x9b  |  ldz   |  zpy             
	 0x9c  |  stz   |  zpy             
	 0x9d  |  ldx   |  zpy             
	 0x9e  |  stx   |  zpy             
	 0x9f  |  ldy   |  zpy             
	 0xa0  |  sty   |  zpy             
	 0xa1  |  cmp   |  zpy             
	 0xa2  |  cpx   |  zpy             
	 0xa3  |  cpy   |  zpy             
	 0xb0  |  shr   |  zpg             
	 0xb1  |  shl   |  zpg             
	 0xb2  |  ror   |  zpg             
	 0xb3  |  rol   |  zpg             
	 0xb4  |  and   |  zpg             
	 0xb5  |  lor   |  zpg             
	 0xb6  |  xor   |  zpg             
	 0xb7  |  inc   |  zpg             
	 0xb8  |  dec   |  zpg             
	 0xb9  |  adc   |  zpg             
	 0xba  |  sbc   |  zpg             
	 0xbb  |  ldz   |  zpg             
	 0xbc  |  stz   |  zpg             
	 0xbd  |  ldx   |  zpg             
	 0xbe  |  stx   |  zpg             
	 0xbf  |  ldy   |  zpg             
	 0xc0  |  sty   |  zpg             
	 0xc1  |  cmp   |  zpg             
	 0xc2  |  cpx   |  zpg             
	 0xc3  |  cpy   |  zpg             
	 0xd0  |  shr   |  adr             
	 0xd1  |  shl   |  adr             
	 0xd2  |  ror   |  adr             
	 0xd3  |  rol   |  adr             
	 0xd4  |  and   |  adr             
	 0xd5  |  lor   |  adr             
	 0xd6  |  xor   |  adr             
	 0xd7  |  inc   |  adr             
	 0xd8  |  dec   |  adr             
	 0xd9  |  adc   |  adr             
	 0xda  |  sbc   |  adr             
	 0xdb  |  ldz   |  adr             
	 0xdc  |  stz   |  adr             
	 0xdd  |  ldx   |  adr             
	 0xde  |  stx   |  adr             
	 0xdf  |  ldy   |  adr             
	 0xe0  |  sty   |  adr             
	 0xe1  |  jts   |  adr             
	 0xe2  |  jmp   |  adr             
	 0xe3  |  jeq   |  adr             
	 0xe4  |  jle   |  adr             
	 0xe5  |  jgr   |  adr             
	 0xe6  |  jne   |  adr             
	 0xe7  |  jnl   |  adr             
	 0xe8  |  jng   |  adr             
	 0xe9  |  jpv   |  adr             
	 0xea  |  jnv   |  adr             
	 0xeb  |  jpn   |  adr             
	 0xec  |  jnn   |  adr             
	 0xed  |  jpc   |  adr             
	 0xee  |  jnc   |  adr             
	 0xff  |  cmp   |  adr             
	 0xf0  |  cpx   |  adr             
	 0xf1  |  cpy   |  adr             


8
5
8 - 5 = 3 + 1 = 4

4

64 * 2 = 128

0 0 0 0
1 1 1 1
2 2 2 2
3 3 3 3
4 4 4 4
5 5 5 5
6 6 6 6
7 7 7 7
8 8 8 8
9 9 9 9
a a a a
b b b b
c c c c
d d d d
e e e e
f f f f


 0x00  |  nop   |  noa 
 0x01  |  inx   |  noa 
 0x02  |  dex   |  noa 
 0x03  |  iny   |  noa 
 0x04  |  dey   |  noa 
 0x05  |  zrx   |  noa 
 0x06  |  zry   |  noa 
 0x07  |  psh   |  noa 
 0x08  |  pop   |  noa 
 0x09  |  psf   |  noa 
 0x0a  |  pof   |  noa 
 0x0b  |  ret   |  noa 
 0x0c  |  rti   |  noa 
 0x0d  |  tzy   |  noa 
 0x0e  |  tzx   |  noa 
 0x0f  |  tyz   |  noa 
 0x10  |  tyx   |  noa 
 0x11  |  txz   |  noa 
 0x12  |  txy   |  noa 
 0x13  |  szy   |  noa 
 0x14  |  szx   |  noa 
 0x15  |  sxy   |  noa 
 0x16  |  sec   |  noa 
 0x17  |  sev   |  noa 
 0x18  |  clc   |  noa 
 0x19  |  clv   |  noa 
 0x1a  |  shr   |  noa 
 0x1b  |  shl   |  noa 
 0x1c  |  ror   |  noa 
 0x1d  |  rol   |  noa 

 0x20  |  and   |  cst 
 0x21  |  lor   |  cst 
 0x22  |  xor   |  cst 
 0x23  |  adc   |  cst 
 0x24  |  sbc   |  cst 
 0x25  |  ldz   |  cst 
 0x26  |  ldx   |  cst 
 0x27  |  ldy   |  cst 
 0x28  |  cmp   |  cst 
 0x29  |  cpx   |  cst 
 0x2a  |  cpy   |  cst 

 0x30  |  shr   |  adx 
 0x31  |  shl   |  adx 
 0x32  |  ror   |  adx 
 0x33  |  rol   |  adx 
 0x34  |  and   |  adx 
 0x35  |  lor   |  adx 
 0x36  |  xor   |  adx 
 0x37  |  inc   |  adx 
 0x38  |  dec   |  adx 
 0x39  |  adc   |  adx 
 0x3a  |  sbc   |  adx 
 0x3b  |  ldz   |  adx 
 0x3c  |  stz   |  adx 
 0x3d  |  ldx   |  adx 
 0x3e  |  stx   |  adx 
 0x3f  |  ldy   |  adx 

 0x40  |  sty   |  adx 
 0x41  |  cmp   |  adx 
 0x42  |  cpx   |  adx 
 0x43  |  cpy   |  adx 

 0x50  |  shr   |  ady 
 0x51  |  shl   |  ady 
 0x52  |  ror   |  ady 
 0x53  |  rol   |  ady 
 0x54  |  and   |  ady 
 0x55  |  lor   |  ady 
 0x56  |  xor   |  ady 
 0x57  |  inc   |  ady 
 0x58  |  dec   |  ady 
 0x59  |  adc   |  ady 
 0x5a  |  sbc   |  ady 
 0x5b  |  ldz   |  ady 
 0x5c  |  stz   |  ady 
 0x5d  |  ldx   |  ady 
 0x5e  |  stx   |  ady 
 0x5f  |  ldy   |  ady 
 0x60  |  sty   |  ady 
 0x61  |  cmp   |  ady 
 0x62  |  cpx   |  ady 
 0x63  |  cpy   |  ady 

 0x70  |  shr   |  zpx 
 0x71  |  shl   |  zpx 
 0x72  |  ror   |  zpx 
 0x73  |  rol   |  zpx 
 0x74  |  and   |  zpx 
 0x75  |  lor   |  zpx 
 0x76  |  xor   |  zpx 
 0x77  |  inc   |  zpx 
 0x78  |  dec   |  zpx 
 0x79  |  adc   |  zpx 
 0x7a  |  sbc   |  zpx 
 0x7b  |  ldz   |  zpx 
 0x7c  |  stz   |  zpx 
 0x7d  |  ldx   |  zpx 
 0x7e  |  stx   |  zpx 
 0x7f  |  ldy   |  zpx 
 0x80  |  sty   |  zpx 
 0x81  |  cmp   |  zpx 
 0x82  |  cpx   |  zpx 
 0x83  |  cpy   |  zpx 

 0x90  |  shr   |  zpy 
 0x91  |  shl   |  zpy 
 0x92  |  ror   |  zpy 
 0x93  |  rol   |  zpy 
 0x94  |  and   |  zpy 
 0x95  |  lor   |  zpy 
 0x96  |  xor   |  zpy 
 0x97  |  inc   |  zpy 
 0x98  |  dec   |  zpy 
 0x99  |  adc   |  zpy 
 0x9a  |  sbc   |  zpy 
 0x9b  |  ldz   |  zpy 
 0x9c  |  stz   |  zpy 
 0x9d  |  ldx   |  zpy 
 0x9e  |  stx   |  zpy 
 0x9f  |  ldy   |  zpy 
 0xa0  |  sty   |  zpy 
 0xa1  |  cmp   |  zpy 
 0xa2  |  cpx   |  zpy 
 0xa3  |  cpy   |  zpy 

 0xb0  |  shr   |  zpg 
 0xb1  |  shl   |  zpg 
 0xb2  |  ror   |  zpg 
 0xb3  |  rol   |  zpg 
 0xb4  |  and   |  zpg 
 0xb5  |  lor   |  zpg 
 0xb6  |  xor   |  zpg 
 0xb7  |  inc   |  zpg 
 0xb8  |  dec   |  zpg 
 0xb9  |  adc   |  zpg 
 0xba  |  sbc   |  zpg 
 0xbb  |  ldz   |  zpg 
 0xbc  |  stz   |  zpg 
 0xbd  |  ldx   |  zpg 
 0xbe  |  stx   |  zpg 
 0xbf  |  ldy   |  zpg 
 0xc0  |  sty   |  zpg 
 0xc1  |  cmp   |  zpg 
 0xc2  |  cpx   |  zpg 
 0xc3  |  cpy   |  zpg 

 0xd0  |  shr   |  adr 
 0xd1  |  shl   |  adr 
 0xd2  |  ror   |  adr 
 0xd3  |  rol   |  adr 
 0xd4  |  and   |  adr 
 0xd5  |  lor   |  adr 
 0xd6  |  xor   |  adr 
 0xd7  |  inc   |  adr 
 0xd8  |  dec   |  adr 
 0xd9  |  adc   |  adr 
 0xda  |  sbc   |  adr 
 0xdb  |  ldz   |  adr 
 0xdc  |  stz   |  adr 
 0xdd  |  ldx   |  adr 
 0xde  |  stx   |  adr 
 0xdf  |  ldy   |  adr 

 0xe0  |  sty   |  adr 
 0xe1  |  jts   |  adr 
 0xe2  |  jmp   |  adr 
 0xe3  |  jeq   |  adr 
 0xe4  |  jle   |  adr 
 0xe5  |  jgr   |  adr 
 0xe6  |  jne   |  adr 
 0xe7  |  jnl   |  adr 
 0xe8  |  jng   |  adr 
 0xe9  |  jpv   |  adr 
 0xea  |  jnv   |  adr 
 0xeb  |  jpn   |  adr 
 0xec  |  jnn   |  adr 
 0xed  |  jpc   |  adr 
 0xef  |  jnc   |  adr 

 0xf0  |  cmp   |  adr 
 0xf1  |  cpx   |  adr 
 0xf2  |  cpy   |  adr 







instructions:
	0x00 -> nop -> no operation
	0x01 -> inx -> incremeant x by 1
	0x02 -> dex -> decremeant x by 1
	0x03 -> iny -> incremeant y by 1
	0x04 -> dey -> decremeant y by 1
	0x05 -> szr -> shifts z to the right by one bit
	0x06 -> szl -> shifts z to the left  by one bit
	0x07 -> rzr -> rotate z to the right by one bit
	0x08 -> rzl -> rotate z to the left  by one bit
	0x09 -> zrx -> zero out x
	0x0a -> zry -> zero out y
	0x0b -> psh -> pushes z into the stack
	0x0c -> pop -> pops   the stack into z
	0x0d -> psf -> pushes f into the stack
	0x0e -> pof -> pops   the stack into f
	0x0f -> rfs -> return from subroutine
	0x10 -> rfi -> return from interrupt  
	0x11 -> tzy -> transfer z to y 
	0x12 -> tzx -> transfer z to x 
	0x13 -> tyz -> transfer y to z 
	0x14 -> tyx -> transfer y to x 
	0x15 -> txz -> transfer x to z 
	0x16 -> txy -> transfer x to y 
	0x17 -> szy -> swap z to y 
	0x18 -> szx -> swap z to x 
	0x19 -> sxy -> swap x to y 
	0x1a -> sec -> set carry     flag
	0x1b -> sev -> set overflow  flag
	0x1c -> clc -> clear carry     flag
	0x1d -> clv -> clear overflow  flag
	2 bytes argument
	0x1e -> shr -> shifts memory to the right by one bit
	0x1f -> shl -> shifts memory to the left  by one bit
	0x20 -> ror -> rotate memory to the right by one bit
	0x21 -> rol -> rotate memory to the left  by one bit
	0x22 -> and -> and memory with z, the result is stored in z
	0x23 -> lor -> or  memory with z, the result is stored in z
	0x24 -> xor -> xor memory with z, the result is stored in z
	0x25 -> inc -> incremeants memory by 1
	0x26 -> dec -> incremeants memory by 1
	0x27 -> adc -> add memory to   z with carry
	0x28 -> sbc -> sub memory from z with carry
	0x29 -> ldz -> load memory into z
	0x2a -> stz -> stores z into memory
	0x2b -> ldx -> load memory into x
	0x2c -> stx -> stores x into memory
	0x2d -> ldy -> load memory into y
	0x2e -> sty -> stores y into memory
	0x2f -> jts -> jump to subroutine
	0x30 -> jmp -> jump to memory location
	0x31 -> jeq -> jump if the previous operation is equal
	0x32 -> jle -> jump if the previous operation is less
	0x33 -> jgr -> jump if the previous operation is greater
	0x34 -> jne -> jump if the previous operation is not equal
	0x35 -> jnl -> jump if the previous operation is not less
	0x36 -> jng -> jump if the previous operation is not greater
	0x37 -> jpv -> jump if the overflow flag is set
	0x38 -> jnv -> jump if the overflow flag is not set
	0x39 -> jpn -> jump if the negative flag is set
	0x3a -> jnn -> jump if the negative flag is not set
	0x3b -> jpc -> jump if the carry    flag is set
	0x3c -> jnc -> jump if the carry    flag is not set
	0x3d -> cmp -> compare memory with z
	0x3e -> cpx -> compare memory with x
	0x3f -> cpy -> compare memory with y
	1 byte argument
	0x40 -> adn -> and number with z, the result is stored in z
	0x41 -> orn -> or  number with z, the result is stored in z
	0x42 -> xrn -> xor number with z, the result is stored in z
	0x43 -> anc -> add number to   z with carry
	0x44 -> snc -> sub number from z with carry
	0x45 -> lnz -> load number into z
	0x46 -> lnx -> load number into x
	0x47 -> lny -> load number into y
	0x48 -> cpn -> compare number with z
	0x49 -> cnx -> compare number with x
	0x4a -> cny -> compare number with y

flags:
	C : carry
	Z : zero
	L : less
	N : negative
	V : overflow
